{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["drawRect","detections","ctx","forEach","prediction","x","y","width","height","text","confidence","color","Math","floor","random","toString","strokeStyle","font","fillStyle","beginPath","fillText","rect","stroke","App","webcamRef","useRef","canvasRef","runCoco","a","cocossd","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","obj","getContext","useEffect","React","useState","facingMode","setFacingMode","videoConstraints","handleClick","useCallback","prevState","console","log","className","id","ref","muted","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0aAAaA,G,OAAS,SAACC,EAAWC,GAC9BD,EAAWE,SAAQ,SAAAC,GAAY,kBAEFA,EAAU,KAFR,GAEpBC,EAFoB,KAElBC,EAFkB,KAEhBC,EAFgB,KAEVC,EAFU,KAGrBC,EAAKL,EAAU,MACfM,EAAWN,EAAU,MAGrBO,EAAM,IAAIC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAC5Db,EAAIc,YAAYL,EAChBT,EAAIe,KAAK,aACTf,EAAIgB,UAAUP,EAGdT,EAAIiB,YACJjB,EAAIkB,SAASX,EAAKJ,EAAEC,GACpBJ,EAAIkB,SAASV,EAAWL,EAAEC,EAAE,IAC5BJ,EAAImB,KAAKhB,EAAEC,EAAEC,EAAMC,GACnBN,EAAIoB,cCsFGC,MA1Ff,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAGnBE,EAAO,uCAAG,4BAAAC,EAAA,sEAGEC,MAHF,OAGRC,EAHQ,OAMdC,aAAY,WACVC,EAAOF,KACN,IARW,2CAAH,qDAWPE,EAAM,uCAAG,WAAOF,GAAP,uBAAAF,EAAA,yDAGkB,qBAAtBJ,EAAUS,SACK,OAAtBT,EAAUS,SAC6B,IAAvCT,EAAUS,QAAQC,MAAMC,WALb,wBAQLD,EAAQV,EAAUS,QAAQC,MAC1BE,EAAaZ,EAAUS,QAAQC,MAAME,WACrCC,EAAcb,EAAUS,QAAQC,MAAMG,YAG5Cb,EAAUS,QAAQC,MAAM3B,MAAQ6B,EAChCZ,EAAUS,QAAQC,MAAM1B,OAAS6B,EAGjCX,EAAUO,QAAQ1B,MAAQ6B,EAC1BV,EAAUO,QAAQzB,OAAS6B,EAlBhB,UAsBOP,EAAIE,OAAOE,GAtBlB,QAsBLI,EAtBK,OAyBLpC,EAAMwB,EAAUO,QAAQM,WAAW,MAIzCvC,EAASsC,EAAIpC,GA7BF,4CAAH,sDAiCZsC,qBAAU,WAAKb,MAAW,IAjDb,MAkDuBc,IAAMC,SArDnB,QAGV,mBAkDNC,EAlDM,KAkDMC,EAlDN,KAoDTC,EAA0C,CAC5CF,WAAYA,EACZpC,MAAO,IACPC,OAAQ,KAGJsC,EAAcL,IAAMM,aAAY,WACpCH,GAAc,SAACI,GAAD,MA9DO,SA+DnBA,EA9D0B,cADP,YAmEpB,IAKH,OAHAC,QAAQC,IAAIP,EAAaE,GAIvB,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAClB,yBAAKC,GAAG,gBACN,kBAAC,IAAD,CACEC,IAAK7B,EACL8B,OAAO,EACPT,iBAAkBA,IAGpB,4BAAQO,GAAG,eACTC,IAAK3B,KAIP,4BAAQ6B,QAAST,GAAjB,oBC7FRU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d324cbb3.chunk.js","sourcesContent":["export const drawRect=(detections,ctx)=>{\r\n    detections.forEach(prediction=>{\r\n        //get prediction results\r\n        const [x,y,width,height]=prediction['bbox'];\r\n        const text=prediction['class'];\r\n        const confidence=prediction['score'];\r\n\r\n        //set styling\r\n        const color='#'+Math.floor(Math.random()*17777215).toString(16);\r\n        ctx.strokeStyle=color\r\n        ctx.font=\"18px Arial\"\r\n        ctx.fillStyle=color\r\n\r\n        //draw rectangles and text\r\n        ctx.beginPath()\r\n        ctx.fillText(text,x,y)\r\n        ctx.fillText(confidence,x,y+20)\r\n        ctx.rect(x,y,width,height)\r\n        ctx.stroke()\r\n    })\r\n}","// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n// 1. TODO - Import required model here\r\n// e.g. import * as tfmodel from \"@tensorflow-models/tfmodel\";\r\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\n// 2. TODO - Import drawing utility here\r\nimport { drawRect } from \"./utilities\";\r\n\r\nconst FACING_MODE_USER = \"user\";\r\nconst FACING_MODE_ENVIRONMENT = \"environment\";\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // Main function\r\n  const runCoco = async () => {\r\n    // 3. TODO - Load network \r\n    // e.g. const net = await cocossd.load();\r\n    const net=await cocossd.load();\r\n    \r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // 4. TODO - Make Detections\r\n      // e.g. const obj = await net.detect(video);\r\n      const obj = await net.detect(video);\r\n\r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      // 5. TODO - Update drawing utility\r\n      // drawSomething(obj, ctx)\r\n      drawRect(obj,ctx);\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runCoco()},[]);\r\n  const [facingMode, setFacingMode] = React.useState(FACING_MODE_USER);\r\n\r\n  let videoConstraints: MediaTrackConstraints = {\r\n    facingMode: facingMode,\r\n    width: 270,\r\n    height: 480\r\n  };\r\n\r\n  const handleClick = React.useCallback(() => {\r\n    setFacingMode((prevState) =>\r\n      prevState === FACING_MODE_USER\r\n        ? FACING_MODE_ENVIRONMENT\r\n        : FACING_MODE_USER\r\n    );\r\n  }, []);\r\n\r\n  console.log(facingMode + videoConstraints);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <div id=\"video-stream\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          muted={true}\r\n          videoConstraints={videoConstraints}\r\n        />\r\n\r\n        <canvas id=\"bounding-box\"\r\n          ref={canvasRef}\r\n        />\r\n\r\n        </div>\r\n        <button onClick={handleClick}>Switch camera</button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}